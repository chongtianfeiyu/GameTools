package com.frameWork.uiControls{	import com.frameWork.IDisable;	import com.frameWork.uiControls.tweens.UITweens;		import flash.geom.Point;		import feathers.events.FeathersEventType;		import starling.core.Starling;	import starling.display.DisplayObject;	import starling.display.DisplayObjectContainer;	import starling.events.Event;	import starling.events.EventDispatcher;
		/**	 * ui模块,这里有对模块的分类，gc管理，视图和逻辑分离管理	 * @author taojiang	 * 	 */		public class UIMoudle extends EventDispatcher implements IDisable	{				public static var openTweenFactory:Function = null;		public static var closeTweenFactory:Function = null;				public var uiId:int = 0;								//ui的Id		public var uiGroupId:int = UIConstant.GROUP_NORMAL_UI;	//ui的类型Id		public var uiState:int = UIConstant.DEFAULT;			//状态		public var gcDelayTime:Number = UIConstant.GC_TIME;		//gc时间 0表示永不gc -1立即回收		public var smartClose:Boolean = true;						//是否自动关闭		public var showTween:Boolean = true;						//显示过度动画				protected var openData:Object = null;					//开启的时候传入的参数		protected var uiContent:DisplayObject;					//ui的内显示内容		protected var openTween:UITweens;						//开启时的过度动画		protected var closeTween:UITweens;						//关闭时的过度动画							public function UIMoudle()		{			super();		}				public function internalInit(gui:DisplayObject):void		{			uiContent = gui;		}				/**		 * 开启一个模块ui 		 * @param pt		显示的位置		 * @param data		显示时传出的参数		 * 		 */				public function open(pt:Point = null,data:Object = null):void		{			//父级			openData = data;			if(fatherSpace)			{				//添加到显示列表中				if(!uiContent.parent) 				{					uiContent.addEventListener(FeathersEventType.CREATION_COMPLETE,uiCreateComplete);					fatherSpace.addChild(uiContent);				}				if(pt) //重置坐标				{					uiContent.x = pt.x;					uiContent.y = pt.y;				}			}						uiState = UIConstant.OPEN;						//开启动画			if(!openTween) openTween = openTweenFactory ? openTweenFactory() : null;			if(openTween)  {				openTween.addEventListener(Event.COMPLETE,					function(event:Event):void					{						openTween.removeEventListeners(Event.COMPLETE);							openAfterHandler();					});				openTween.play();			} else {				openAfterHandler();			}		}				/**		 * 窗口开启之后处理，如果有动画先等动画播放完了之后再执行 		 * 		 */				protected function openAfterHandler():void {					}				/**		 * ui被创建完成之后回调处理 		 * @param event		 */				protected function uiCreateComplete(event:Event):void {			uiContent.removeEventListeners(FeathersEventType.CREATION_COMPLETE);		}				public function close():void		{			if(openTween) openTween.stop();			if(!closeTween) closeTween = closeTweenFactory ? closeTweenFactory() : null;			if(closeTween) 			{				closeTween.addEventListener(Event.COMPLETE,					function(event:Event):void					{						closeTween.removeEventListeners(Event.COMPLETE);						if(uiContent) uiContent.removeFromParent(false);						uiState = UIConstant.HIDE;					});				closeTween.play();			}			else			{				if(uiContent) uiContent.removeFromParent(false);				uiState = UIConstant.HIDE;				closeAfter();			}		}				/**		 * 窗口关闭了之后处理，如果有动画则等动画放完了之后执行 		 * 		 */				protected function closeAfter():void {					}				/**		 * ui显示动画完成之后回调处理 		 * @param event		 * 		 */				protected function openTweenComplete(event:Event):void {			openTween.removeEventListener(Event.COMPLETE,openTweenComplete);		}				public function dispose():void		{			if(openTween)			{				openTween.removeEventListeners(Event.COMPLETE);				openTween.dispose();				openTween = null;			}						if(closeTween)			{				closeTween.removeEventListeners(Event.COMPLETE);				closeTween.dispose();				closeTween = null;			}						if(uiContent) 			{				uiContent.removeEventListeners(FeathersEventType.CREATION_COMPLETE);				uiContent.removeFromParent(true);			}		}				public function get gui():DisplayObject		{			return uiContent;		}				/**		 * 父级显示的容器 		 * @return 		 */				public function get fatherSpace():DisplayObjectContainer		{			return Starling.current.stage;			}	}}